name: Packer Build Custom Image

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Packer Build Custom Image Job
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Making zip of the project
        run: zip -r webapp.zip .

      - name: Setup PostgreSQL
        uses: ikalnytskyi/action-setup-postgres@v5
        with:
            username: ${{ secrets.DB_USERNAME }}
            password: ${{ secrets.DB_PASSWORD }}
            database: ${{ secrets.DB_NAME }}
            port: ${{ secrets.DB_PORT }}
        id: postgres

      - name: Setting up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: "Creating env file"
        run: |
          touch .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo DB_USER=${{ secrets.DB_USERNAME }} >> .env
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo ENV=${{ secrets.ENV }} >> .env
          echo "cat .env"
          cat .env
          echo "ls -a ."
          ls -a .
          echo "ls -a ${{ github.workspace }}"
          ls -a ${{ github.workspace }}
  
      - name: Installing dependencies
        run: npm install
  
      - name: Runing node tests
        run: npm test

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
  
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
  
      - name: 'Use gcloud CLI'
        run: 'gcloud info'
        
      - name: Setting up `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
            version: "latest"
        
      - name: Initialize packer
        id: init
        run: packer init .
    
      - name : Format Packer
        id: format
        run: packer fmt -check=true .
        
      - name: Run packer validate
        id: validate
        run: packer validate .

      - name: Build Packer
        id: build
        run: |
          PACKER_OUTPUT=$(packer build .)
          echo "$PACKER_OUTPUT"
          IMAGE_ID=$(echo "$PACKER_OUTPUT" | grep 'A disk image was created' | grep -oP 'centos-stream-8-v\d+-\d+-\d+-\d+-\d+-\d+-\d+')
          echo "IMAGE_ID=$IMAGE_ID"
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_OUTPUT
      
      - name: Getting Gcloud Secrets
        id: gcloud_secrets
        run: |
          echo "DB_NAME=$(gcloud secrets versions access latest --secret="DB_NAME" --format="value(payload.data)")" >> $GITHUB_OUTPUT
          echo "DB_USER=$(gcloud secrets versions access latest --secret="DB_USER" --format="value(payload.data)")" >> $GITHUB_OUTPUT
          echo "DB_PASSWORD=$(gcloud secrets versions access latest --secret="DB_PASSWORD" --format="value(payload.data)")" >> $GITHUB_OUTPUT
          echo "DB_PORT=$(gcloud secrets versions access latest --secret="DB_PORT" --format="value(payload.data)")" >> $GITHUB_OUTPUT
          echo "DB_HOST=$(gcloud secrets versions access latest --secret="DB_HOST" --format="value(payload.data)")" >> $GITHUB_OUTPUT
          echo "PUBSUB_TOPIC_NAME=$(gcloud secrets versions access latest --secret="PUBSUB_TOPIC_NAME" --format="value(payload.data)")" >> $GITHUB_OUTPUT
          echo "TOKEN_EXPIRY=$(gcloud secrets versions access latest --secret="TOKEN_EXPIRY" --format="value(payload.data)")" >> $GITHUB_OUTPUT

      - name: Create New Instance Template Version
        id: create_template
        run: |
          uuid=$(uuidgen | tr '[:upper:]' '[:lower:]' | tr -d '-')
          echo "::set-output name=unique_id::$uuid"
          TEMPLATE_NAME = "webapp-instance-template-$uuid"
          echo "TEMPLATE_NAME=$TEMPLATE_NAME" >> $GITHUB_OUTPUT
          gcloud compute instance-templates create $TEMPLATE_NAME \
            --instance-template-region=us-east1 \
            --project=cloud-webapp-dev \
            --machine-type=e2-medium \
            --boot-disk-size=50GB \
            --boot-disk-type=pd-balanced \
            --region=us-east1 \
            --image=projects/cloud-webapp-dev/global/images/${{steps.build.outputs.IMAGE_ID}} \
            --network-interface network=webapp-vpc-1,network-tier=PREMIUM,subnet=webapp-subnet \
            --service-account=logging-sa@cloud-webapp-dev.iam.gserviceaccount.com \
            --tags=webapp,allow-health-check \
            --scopes=https://www.googleapis.com/auth/cloud-platform \
            --metadata=startup-script='#! /bin/bash
            varenv="/opt/csye6225dir/webapp/.env"
            > "$varenv"
            {
              echo "DB_NAME: ${{steps.gcloud_secrets.outputs.DB_NAME}}"
              echo "DB_USER: ${{steps.gcloud_secrets.outputs.DB_USER}}"
              echo "DB_PASSWORD: ${{steps.gcloud_secrets.outputs.DB_PASSWORD}}"
              echo "DB_PORT: ${{steps.gcloud_secrets.outputs.DB_PORT}}"
              echo "DB_HOST: ${{steps.gcloud_secrets.outputs.DB_HOST}}"
              echo "ENV: prod"
              echo "PUBSUB_TOPIC_NAME: ${{steps.gcloud_secrets.outputs.PUBSUB_TOPIC_NAME}}"
              echo "TOKEN_EXPIRY: ${{steps.gcloud_secrets.outputs.TOKEN_EXPIRY}}"
            } >> "$varenv"

            systemctl daemon-reload
            systemctl enable webapp.service
            systemctl start webapp.service
            EOF'

      - name: Update Managed Instance Group with New Template
        id: update_group
        run: |
          gcloud compute instance-groups managed set-instance-template webapp-instance-group-manager \
            --template=projects/cloud-webapp-dev/regions/us-east1/instanceTemplates/${{steps.create_template.outputs.TEMPLATE_NAME}} \
            --region=us-east1

      - name: Re-create Instances in Managed Instance Group
        id: start_update
        run: |
          gcloud compute instance-groups managed rolling-action start-update webapp-instance-group-manager \
            --version=template=projects/cloud-webapp-dev/regions/us-east1/instanceTemplates/${{steps.create_template.outputs.TEMPLATE_NAME}} \
            --region=us-east1

      - name: Wait for Instance Refresh Completion
        id: wait
        run: |
          gcloud compute instance-groups managed wait-until webapp-instance-group-manager \
            --version-target-reached \
            --region=us-east1
  
       
